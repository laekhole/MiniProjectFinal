<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.board">


	<!-- 1. 게시판 목록 -->
	<select id="getBoardList" resultType="BoardDTO">
		select 
			boardid
			, title
			, writer_uid
			, mod_date
			, view_count
			, writer_email
		from board 
		where delete_yn='N'
		order by boardid desc
	</select>
	

	
	
	<!-- 2. 게시판 상세 -->
	<select id="getBoard" resultType="BoardDTO" >
		select *
		from board 
		where boardid = #{boardid}
		and delete_yn='N'
	</select>


	<!-- 3. 게시판 글쓰기 -->
	<insert id="insertBoard" >
		<selectKey keyProperty="boardid" resultType="int"  order="BEFORE">
			select 
				seq_board.nextval boardid
			from dual
		</selectKey>
		INSERT INTO board (
			  pid
			, boardid
			, title
			, contents
			, writer_uid
			, reg_date
			, writer_email
		) VALUES (
			  0
			, #{boardid}
			, #{title}
			, #{contents}
			, #{writer_uid}
			, sysdate
			, #{writer_email}
		)
	</insert>

	<!-- 3-2. 게시판 답글쓰기 -->
	<insert id="insertBoardReply" >
		<selectKey keyProperty="boardid" resultType="int"  order="BEFORE">
			select 
				seq_board.nextval boardid 
			from dual
		</selectKey>
		INSERT INTO board (
			  pid
			, boardid
			, title
			, contents
			, writer_uid
			, reg_date
		) VALUES (
		      #{pid} 
			, #{boardid}
			, #{title}
			, #{contents}
			, #{writer_uid}
			, sysdate
		)
	</insert>


	<!-- //4. 게시판 수정 -->
	<update id="updateBoard">
		update board set 
			  title=#{title}
			, contents=#{contents}
			, mod_date= sysdate
		where boardid=#{boardid}
	</update>
	
	
	<!-- //5. 게시판 삭제 -->
	<update id="deleteBoard" >
		update board set
					delete_yn='Y' 
		where boardid=#{boardid}
	</update>
	
	
	<!-- //6. 메인페이지 TOP5 뽑기 -->
	<!-- 조회수로 order by -->
	<select id="boardTop5" resultType="BoardDTO">
		<![CDATA[
			select 
				rownum, sub.*  
			from (
				select 
					level, boardid, title, writer_uid, view_count
			from board
     	where delete_yn = 'N' 
 			start with pid=0 
 			CONNECT BY PRIOR boardid = pid
			order by board.view_count desc
			) sub 
			where rownum <=5
		]]>
	</select>
	
	
<!-- 	    select * from ( -->
<!--       select -->
<!--       	rownum as nrow, a.* -->
<!--       from ( -->
<!--         select level, boardid, title, writer_uid, view_count -->
<!--         from board -->
<!--         	where delete_yn = 'N' -->
<!--  			start with pid=0 -->
<!-- 			CONNECT BY PRIOR boardid = pid -->
<!-- 			order SIBLINGS by boardid desc -->
<!--       ) a -->
<!--       where rownum &lt;= #{endNo} -->
<!--     ) o -->
<!--     where nrow between #{startNo} and #{endNo} -->
	
	
	
	
	
	
	
	<!-- //7. 조회수 증가 -->
	<update id="viewCount" >
		update board set 
			view_count = view_count + 1 
		where boardId = #{boardId}
	</update>
	
	
	
	<!-- //8. 체크박스된 게시글 삭제 -->
	<delete id="deleteBoards" >
		delete from board 
		where boardid in
		<foreach item="boardid" collection="list"  open="("  separator="," close=")"> 
			#{boardid}		
		</foreach> 
	</delete>
	
	
	
	
	

<!--
	 //9. [더보기] 답글까지 포함한 보드리스트 얻기
	<select id="getBoardList2" resultType="BoardDTO">
		select * from (
			select 
				level, pid, boardid, step, title, writer_uid, reg_date, view_count
			from board 
			where delete_yn = 'N' 
			<if test="boardid != 0">
				<![CDATA[
				and boardid > #{boardid}
				]]>
			</if>
			start with pid=0
			CONNECT BY PRIOR boardid = pid
			order SIBLINGS by boardid desc  
		) A 
		<![CDATA[
		where rownum <= 10
		]]>
	</select>
 -->

	<!-- //9. 답글까지 포함한 보드리스트 얻기 -->
	<select id="getBoardList2" resultType="BoardDTO">

    select * from (
      select
      	rownum as nrow, a.*
      from (
        select level, boardid, title, writer_uid, view_count
        from board
        	where delete_yn = 'N'
        <if test="searchTitle != null and !searchTitle.isEmpty()">
          and title like '%' || #{searchTitle} || '%'
        </if>
 			start with pid=0
			CONNECT BY PRIOR boardid = pid
			order SIBLINGS by boardid desc
      ) a
      where rownum &lt;= #{endNo}
    ) o
    where nrow between #{startNo} and #{endNo}

	</select>
	
	<!-- //9-2. 계층형 쿼리에서 level 정보 포함하여 보드리스트 얻기 -->
<!-- <select id="getBoardList3" resultType="BoardDTO"> -->
<!-- 		select -->
<!-- 		    board.*, LEVEL -->
<!-- 		from board -->
<!-- 		where delete_yn = 'N' -->
<!--     <if test="searchTitle != null and !searchTitle.isEmpty()"> -->
<!--       and title like '%' || #{searchTitle} || '%' -->
<!--     </if> -->
<!-- 		start with pid = 0 -->
<!-- 		connect by prior boardid = pid -->
<!-- 		order by boardid desc; -->
<!-- </select> -->
	

	
	
	
	<!-- //10. 게시글 삭제해도 다시 글 10개씩 보이게 하는 메서드 -->
	<select id="getboardListBoforeN">
		 select * from (
		     select * from board
			 <![CDATA[
		     where boardid < #{boardid} 
			 ]]>
		     order by boardid desc
		 ) A
		 <![CDATA[
		 where rownum <= N		
		 ]]>
	</select>
	
	
<!--  [페이징] 페이징하기 위해서 DB	총 갯수 세는 sql문 --> 
	<select id="getTotalCount" resultType="int">
	    SELECT count(*)
	    FROM board
	    <where>
	        <if test="searchTitle != null and !searchTitle.isEmpty()">
	            AND title LIKE CONCAT(CONCAT('%', #{searchTitle}), '%')
	        </if>
	    </where>
	</select>


<!--     <select id="getBoardList" resultType="BoardDTO"> -->
<!--         <![CDATA[ -->
<!--         SELECT O.* -->
<!--         FROM ( -->
<!--             SELECT ROWNUM nrow, A.* -->
<!--             FROM board A -->
<!--             <where> -->
<!--                 <if test="searchTitle != null and !searchTitle.isEmpty()"> -->
<!--                     AND title LIKE '%' || #{searchTitle} || '%' -->
<!--                 </if> -->
<!--             </where> -->
<!--             <choose> -->
<!--                 <when test="searchTitle != null and !searchTitle.isEmpty()"> -->
<!--                     <if test="totalCount > 0"> -->
<!--                         WHERE ROWNUM &lt;= #{endNo} -->
<!--                     </if> -->
<!--                 </when> -->
<!--                 <otherwise> -->
<!--                     WHERE ROWNUM &lt;= #{endNo} -->
<!--                 </otherwise> -->
<!--             </choose> -->
<!--         ) O -->
<!--         WHERE nrow BETWEEN #{startNo} AND #{endNo} -->
<!--         ]]> -->
<!--     </select> -->




</mapper>